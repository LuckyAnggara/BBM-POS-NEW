
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    function isRequestUserAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function requestUserBranchId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.branchId;
    }
    function isUserAssignedToBranch(branchId) {
      return requestUserBranchId() == branchId;
    }
    function isUserAssignedToResourceBranch() {
      return requestUserBranchId() == resource.data.branchId;
    }
     function isUserAssignedToRequestResourceBranch() {
      return requestUserBranchId() == request.resource.data.branchId;
    }


    // Users Collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isRequestUserAdmin();
      allow create: if request.auth.uid == userId; // Allows new users to create their own document
      allow update: if request.auth.uid == userId && request.resource.data.keys().hasOnly(['name', 'avatarUrl', 'localPrinterUrl', 'updatedAt'])
                    || isRequestUserAdmin() && request.resource.data.keys().hasOnly(['name', 'email', 'avatarUrl', 'branchId', 'role', 'localPrinterUrl', 'createdAt', 'updatedAt']);
    }

    // Branches Collection
    match /branches/{branchId} {
      allow read: if isAuthenticated();
      allow create: if isRequestUserAdmin();
      allow update: if isRequestUserAdmin() || 
                       (isUserAssignedToBranch(branchId) && 
                        request.resource.data.keys().hasOnly(['name', 'invoiceName', 'currency', 'taxRate', 'address', 'phoneNumber', 'defaultReportPeriod', 'updatedAt']));
      allow delete: if isRequestUserAdmin();
    }

    // Inventory Categories Collection
    match /inventoryCategories/{categoryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && isUserAssignedToResourceBranch();
      allow delete: if isAuthenticated() && isUserAssignedToResourceBranch();
    }

    // Inventory Items Collection
    match /inventoryItems/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && isUserAssignedToResourceBranch();
      allow delete: if isAuthenticated() && isUserAssignedToResourceBranch();
    }

    // Customers Collection
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && isUserAssignedToResourceBranch();
      allow delete: if isAuthenticated() && isUserAssignedToResourceBranch();
    }
    
    // Suppliers Collection
    match /suppliers/{supplierId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && isUserAssignedToResourceBranch();
      allow delete: if isAuthenticated() && isUserAssignedToResourceBranch();
    }

    // Expenses Collection
    match /expenses/{expenseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId && isUserAssignedToResourceBranch();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId && isUserAssignedToResourceBranch();
    }

    // POS Shifts Collection
    match /posShifts/{shiftId} {
      allow read: if isAuthenticated() && (isRequestUserAdmin() || request.auth.uid == resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && isUserAssignedToRequestResourceBranch();
      allow update: if isAuthenticated() && (isRequestUserAdmin() || request.auth.uid == resource.data.userId);
    }

    // POS Transactions Collection
    match /posTransactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && isUserAssignedToRequestResourceBranch();
      // Update primarily for returns or admin actions. Or payment status.
      allow update: if isAuthenticated() && (isRequestUserAdmin() || request.auth.uid == resource.data.userId); 
      allow delete: if isRequestUserAdmin(); // Deletion only by admin (with password checked server-side)
    }
    
    // Purchase Orders Collection
    match /purchaseOrders/{poId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.createdById && isUserAssignedToRequestResourceBranch();
        allow update: if isAuthenticated() && (isRequestUserAdmin() || request.auth.uid == resource.data.createdById || request.auth.uid == request.resource.data.createdById); // Allow creator or admin to update
        allow delete: if isRequestUserAdmin(); // Or creator if status is draft? For now admin only
    }

    // Bank Accounts Collection
    match /bankAccounts/{accountId} {
        allow read: if isAuthenticated();
        allow create: if isRequestUserAdmin();
        allow update: if isRequestUserAdmin();
        allow delete: if isRequestUserAdmin();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        allow read: if isAuthenticated();
        allow create: if isRequestUserAdmin() && request.auth.uid == request.resource.data.createdByUid && request.resource.data.isGlobal == true;
        allow update: if false; // Notifications are immutable once created
        allow delete: if false; // Notifications cannot be deleted
    }

    // User Notification Read Status Subcollection
    match /userNotificationStatus/{userId}/notificationsRead/{notificationReadId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Transaction Deletion Requests Collection
    match /transactionDeletionRequests/{requestId} {
      allow read: if isAuthenticated() && (isRequestUserAdmin() || request.auth.uid == resource.data.requestedByUserId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.requestedByUserId &&
                       request.resource.data.branchId == requestUserBranchId(); // User can only request for their branch
      allow update: if isRequestUserAdmin(); // Only admin can update (approve/reject)
      allow delete: if false; // Keep history
    }

  }
}
