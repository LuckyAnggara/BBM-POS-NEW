
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function requestUserRole() {
      return getUserData(request.auth.uid).role;
    }

    function isRequestUserAdmin() {
      return isAuthenticated() && requestUserRole() == 'admin';
    }

    function isSelf(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function requestUserBranchId() {
      return getUserData(request.auth.uid).branchId;
    }

    function resourceBelongsToRequestUserBranch() {
      return requestUserBranchId() == resource.data.branchId;
    }

    function incomingDataBelongsToRequestUserBranch() {
      return requestUserBranchId() == request.resource.data.branchId;
    }
    
    function isResourceOwner(ownerIdField) {
      return isAuthenticated() && request.auth.uid == resource.data[ownerIdField];
    }

    function isIncomingDataOwner(ownerIdField) {
      return isAuthenticated() && request.auth.uid == request.resource.data[ownerIdField];
    }


    // Users Collection
    match /users/{userId} {
      allow read: if isSelf(userId) || isRequestUserAdmin();
      allow create: if isSelf(userId) // User creates their own doc upon registration
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.name == request.auth.token.name
                    && !('role' in request.resource.data) // Role not set by client on create
                    && !('branchId' in request.resource.data); // BranchId not set by client
      allow update: if (isSelf(userId) 
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'updatedAt']))
                    || (isRequestUserAdmin() 
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'role', 'branchId', 'updatedAt']));
      allow delete: if false; // Generally users should not be deleted, but disabled
    }

    // Branches Collection
    match /branches/{branchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isRequestUserAdmin();
    }

    // Inventory Categories Collection
    match /inventoryCategories/{categoryId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId != null;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId; // branchId cannot be changed
      allow delete: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
    }

    // Inventory Items Collection
    match /inventoryItems/{itemId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId != null
                      && request.resource.data.categoryId != null;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId; // branchId cannot be changed
      allow delete: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
    }
    
    // Customers Collection
    match /customers/{customerId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId != null;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId;
      allow delete: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
    }

    // Suppliers Collection
    match /suppliers/{supplierId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId != null;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId;
      allow delete: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
    }

    // Expenses Collection
    match /expenses/{expenseId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId != null
                      && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId
                      && request.resource.data.userId == resource.data.userId; // userId cannot be changed by non-admin
      allow delete: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
    }
    
    // POS Shifts Collection
    match /posShifts/{shiftId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.status == 'active';
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId
                      && request.resource.data.userId == resource.data.userId // Only owner can update their shift
                      && resource.data.status == 'active' && request.resource.data.status == 'ended' // Only allow ending active shift
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'endTime', 'expectedCashAtEnd', 'actualCashAtEnd', 'cashDifference', 'totalSalesByPaymentMethod']);
      allow delete: if isRequestUserAdmin(); // Only admin can delete shifts for record keeping adjustment
    }

    // POS Transactions Collection
    match /posTransactions/{transactionId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.status == 'completed';
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId
                      && (
                        // Return rule
                        (resource.data.status == 'completed' && request.resource.data.status == 'returned'
                          && request.resource.data.returnedByUserId == request.auth.uid
                          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'returnReason', 'returnedAt', 'returnedByUserId', 'outstandingAmount', 'paymentStatus'])
                        ) ||
                        // Record payment for credit sale
                        (resource.data.isCreditSale == true && resource.data.paymentStatus != 'paid' && resource.data.paymentStatus != 'returned'
                          && request.resource.data.paymentsMade.size() == resource.data.paymentsMade.size() + 1 // Only adding one payment
                          && request.resource.data.paymentsMade[request.resource.data.paymentsMade.size() - 1].recordedByUserId == request.auth.uid
                          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['outstandingAmount', 'paymentStatus', 'paymentsMade', 'updatedAt'])
                        )
                      );
      allow delete: if isRequestUserAdmin(); // Requires special password check on client/function
    }
    
    // Bank Accounts Collection
    match /bankAccounts/{accountId} {
      allow read: if isAuthenticated(); // All users can read (e.g. for POS payment options)
      allow create, update, delete: if isRequestUserAdmin(); // Only admin can manage
    }
    
    // Purchase Orders Collection
    match /purchaseOrders/{poId} {
      allow read: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin());
      allow create: if isAuthenticated() && (incomingDataBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.createdById == request.auth.uid;
      allow update: if isAuthenticated() && (resourceBelongsToRequestUserBranch() || isRequestUserAdmin())
                      && request.resource.data.branchId == resource.data.branchId; // Can't change branch
                      // More specific field updates (e.g. status change, item receipt) should ideally be handled by cloud functions for complex validation
                      // For client-side:
                      // && (
                      //   // Status update only (e.g. draft -> ordered, ordered -> cancelled)
                      //   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
                      //   // Item receipt update
                      //   (request.resource.data.status != 'cancelled' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['items', 'status', 'updatedAt'])) ||
                      //   // Payment update
                      //   (request.resource.data.isCreditPurchase == true && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['outstandingPOAmount', 'paymentStatusOnPO', 'paymentsMadeToSupplier', 'updatedAt']))
                      // );
      allow delete: if isRequestUserAdmin() && resource.data.status == 'draft'; // Only draft can be deleted by admin
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isRequestUserAdmin()
                      && request.resource.data.createdByUid == request.auth.uid
                      && request.resource.data.isGlobal == true; // Ensure global for now
      allow update, delete: if false; // Notifications are immutable for now
    }

  }
}
